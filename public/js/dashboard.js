// =========================
// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å®ÂàùÊúü„Éá„Éº„Çø
// =========================
let allSwingData = []; let currentPage = 1; const rowsPerPage = 8; let metricsDataLoaded = false;
let thresholdData = []; let clusterAnalysisData = {}; let currentRandomSwingData = null;
let successMediansData = {};

// ‚ñº‚ñº‚ñº ÂÆöÊï∞ÂÆöÁæ© („Åì„Åì„Å´„Åæ„Å®„ÇÅ„Å¶ÂÆöÁæ©) ‚ñº‚ñº‚ñº
const swingTypeData = [ // ‚òÖ‚òÖ‚òÖ swingTypeData „ÅÆÂÆöÁæ© („Åì„Åì„Å†„Åë„Å´„ÅÇ„Çã„ÅØ„Åö) ‚òÖ‚òÖ‚òÖ
  { id: 0, Club_Type: "„Éâ„É©„Ç§„Éê„Éº", Swing_Type_Name: "Out-In Power", Swing_Type_Name_JP: "„Ç¢„Ç¶„Éà„Ç§„É≥„Éª„Éë„ÉØ„Éº„Éï„Ç©„Éº„É†Âûã", Overview: "„Éë„ÉØ„Éï„É´„Å™„Çπ„Ç§„É≥„Ç∞„ÅßÁêÉ„ÅÆÈ£õË∑ùÈõ¢„ÇíÈáçË¶ñ„ÄÇ„Ç¢„Ç¶„Éà„Ç§„É≥„ÅÆËªåÈÅì„ÅßÂäõÂº∑„ÅèÊåØ„ÇäÊäú„Åè„ÄÇ" },
  { id: 1, Club_Type: "„Éâ„É©„Ç§„Éê„Éº", Swing_Type_Name: "Out-In Compact", Swing_Type_Name_JP: "„Ç¢„Ç¶„Éà„Ç§„É≥„Éª„Ç≥„É≥„Éë„ÇØ„Éà„Éï„Ç©„Éº„É†Âûã", Overview: "„Ç≥„É≥„Éë„ÇØ„Éà„Å™„Çπ„Ç§„É≥„Ç∞„Åß„Ç≥„É≥„Éà„É≠„Éº„É´ÈáçË¶ñ„ÄÇ„Ç¢„Ç¶„Éà„Ç§„É≥„ÅÆËªåÈÅì„ÅßÊ≠£Á¢∫ÊÄß„ÇíÈ´ò„ÇÅ„Çã„ÄÇ" },
  { id: 2, Club_Type: "„Éâ„É©„Ç§„Éê„Éº", Swing_Type_Name: "Flexible Inside-Out", Swing_Type_Name_JP: "„Ç§„É≥„Ç¢„Ç¶„Éà„Éª„Éï„É¨„Ç≠„Ç∑„Éñ„É´„Éï„Ç©„Éº„É†Âûã", Overview: "ÊüîËªü„Å™„Éï„Ç©„Éº„É†„Åß„Çπ„Ç§„É≥„Ç∞ËªåÈÅì„Å´Â§âÂåñ„Åå„ÅÇ„Çä„ÄÅÁä∂Ê≥ÅÂØæÂøúÂäõ„ÅåÈ´ò„ÅÑ„Çπ„Çø„Ç§„É´„ÄÇ" },
  { id: 3, Club_Type: "„Éâ„É©„Ç§„Éê„Éº", Swing_Type_Name: "Inside-Out Power", Swing_Type_Name_JP: "„Ç§„É≥„Ç¢„Ç¶„Éà„Éª„Éë„ÉØ„Éº„Éï„Ç©„Éº„É†Âûã", Overview: "„Ç§„É≥„Ç¢„Ç¶„Éà„ÅÆËªåÈÅì„Åß„Éë„ÉØ„Éº„ÇíÊ¥ª„Åã„Åó„Åü„Çπ„Ç§„É≥„Ç∞„ÄÇ„Éâ„É≠„Éº„Éú„Éº„É´„ÇíÊâì„Å°„ÇÑ„Åô„ÅÑ„Çπ„Çø„Ç§„É´„ÄÇ" },
  { id: 4, Club_Type: "„Éâ„É©„Ç§„Éê„Éº", Swing_Type_Name: "Inside-Out Standard", Swing_Type_Name_JP: "„Ç§„É≥„Ç¢„Ç¶„Éà„Éª„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éï„Ç©„Éº„É†Âûã", Overview: "„Éê„É©„É≥„Çπ„ÅÆ„Å®„Çå„Åü„Éï„Ç©„Éº„É†„Åß„Ç§„É≥„Ç¢„Ç¶„ÉàËªåÈÅì„ÇíÂÆüÁèæ„ÄÇÂÆâÂÆöÊÑü„ÅÆ„ÅÇ„Çã„Çπ„Ç§„É≥„Ç∞„ÄÇ" },
  { id: 5, Club_Type: "„Ç¢„Ç§„Ç¢„É≥", Swing_Type_Name: "Out-In Standard", Swing_Type_Name_JP: "„Ç¢„Ç¶„Éà„Ç§„É≥„Éª„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éï„Ç©„Éº„É†Âûã", Overview: "ÂÆâÂÆö„Åó„Åü„Çπ„Ç§„É≥„Ç∞„Éï„Ç©„Éº„É†„Åß„Ç¢„Ç¶„Éà„Ç§„É≥ËªåÈÅì„Çí‰Ωú„Çã„ÄÇ„Ç≥„É≥„Éà„É≠„Éº„É´„Å®„Éë„ÉØ„Éº„ÅÆ„Éê„É©„É≥„Çπ„ÇíÈáçË¶ñ„ÄÇ" },
  { id: 6, Club_Type: "„Ç¢„Ç§„Ç¢„É≥", Swing_Type_Name: "Square Power", Swing_Type_Name_JP: "„Çπ„ÇØ„Ç®„Ç¢„Éª„Éë„ÉØ„Éº„Éï„Ç©„Éº„É†Âûã", Overview: "„Çπ„ÇØ„Ç®„Ç¢„Å™ËªåÈÅì„Åß„Éë„ÉØ„Éï„É´„Å´ÊåØ„ÇäÊäú„Åè„Çπ„Çø„Ç§„É´„ÄÇÁõ¥ÈÄ≤ÊÄß„ÅÆÈ´ò„ÅÑ„Éú„Éº„É´„ÅåÁâπÂæ¥„ÄÇ" },
  { id: 7, Club_Type: "„Ç¢„Ç§„Ç¢„É≥", Swing_Type_Name: "Square Compact", Swing_Type_Name_JP: "„Çπ„ÇØ„Ç®„Ç¢„Éª„Ç≥„É≥„Éë„ÇØ„Éà„Éï„Ç©„Éº„É†Âûã", Overview: "„Ç≥„É≥„Éë„ÇØ„Éà„Åß„Çπ„ÇØ„Ç®„Ç¢„Å™ËªåÈÅì„Çí‰Ωú„Çã„Çπ„Ç§„É≥„Ç∞„ÄÇÂÆâÂÆöÊÑü„Å®ÂÜçÁèæÊÄß„Å´ÂÑ™„Çå„Çã„ÄÇ" },
  { id: 8, Club_Type: "„Ç¢„Ç§„Ç¢„É≥", Swing_Type_Name: "Straight Power", Swing_Type_Name_JP: "„Çπ„Éà„É¨„Éº„Éà„Éª„Éë„ÉØ„Éº„Éï„Ç©„Éº„É†Âûã", Overview: "Áúü„Å£„Åô„Åê„Å™„Çπ„Ç§„É≥„Ç∞ËªåÈÅì„Åß„Éë„ÉØ„Éº„ÇíÊúÄÂ§ßÂåñ„ÄÇ„Ç∑„É≥„Éó„É´„Åã„Å§ÂäπÊûúÁöÑ„Å™„Çπ„Ç§„É≥„Ç∞„ÄÇ" },
  { id: 9, Club_Type: "„Ç¢„Ç§„Ç¢„É≥", Swing_Type_Name: "Straight Compact", Swing_Type_Name_JP: "„Çπ„Éà„É¨„Éº„Éà„Éª„Ç≥„É≥„Éë„ÇØ„Éà„Éï„Ç©„Éº„É†Âûã", Overview: "„Ç≥„É≥„Éë„ÇØ„Éà„ÅßÁúü„Å£„Åô„Åê„Å™„Çπ„Ç§„É≥„Ç∞ËªåÈÅì„ÄÇÂÜçÁèæÊÄß„Å®Ê≠£Á¢∫ÊÄß„Å´ÂÑ™„Çå„Åü„Çπ„Çø„Ç§„É´„ÄÇ" }
];
const unitMap = { 'impactClubPath': '¬∞', 'impactHandFirst': '', 'addressHandFirst': '', 'impactGripSpeed': 'm/s', 'maxGripSpeed': 'm/s', 'downSwingShaftRotationMax': 'dps', 'downSwingShaftRotationMin': 'dps', 'halfwaydownFaceAngleToVertical': '¬∞', 'halfwaybackFaceAngleToVertical': '¬∞', 'topFaceAngleToHorizontal': '¬∞', 'addressLieAngle': '¬∞', 'estimateCarry': 'yd', 'impactHeadSpeed': 'm/s', 'impactFaceAngle': '¬∞', 'impactLoftAngle': '¬∞', 'impactLieAngle': '¬∞', 'impactAttackAngle': '¬∞' };
const featureDisplayNameMap = { "addressHandFirst": "„Ç¢„Éâ„É¨„Çπ „Éè„É≥„Éâ„Éï„Ç°„Éº„Çπ„Éà", "addressLieAngle": "„Ç¢„Éâ„É¨„Çπ „É©„Ç§Ëßí", "halfwaydownFaceAngleToVertical": "„Éè„Éº„Éï„Ç¶„Çß„Ç§„ÉÄ„Ç¶„É≥ „Éï„Çß„Éº„ÇπËßí", "impactGripSpeed": "„Ç§„É≥„Éë„ÇØ„Éà „Ç∞„É™„ÉÉ„ÉóÈÄüÂ∫¶", "downSwingShaftRotationMax": "„ÉÄ„Ç¶„É≥„Çπ„Ç§„É≥„Ç∞ „Ç∑„É£„Éï„ÉàÂõûËª¢(Max)", "halfwaybackFaceAngleToVertical": "„Éè„Éº„Éï„Ç¶„Çß„Ç§„Éê„ÉÉ„ÇØ „Éï„Çß„Éº„ÇπËßí", "topFaceAngleToHorizontal": "„Éà„ÉÉ„Éó „Éï„Çß„Éº„ÇπËßí", "downSwingShaftRotationMin": "„ÉÄ„Ç¶„É≥„Çπ„Ç§„É≥„Ç∞ „Ç∑„É£„Éï„ÉàÂõûËª¢(Min)" };
const adviceMapping = { "addressHandFirst": { "near": "„Éä„Ç§„Çπ„Ç¢„Éâ„É¨„Çπ„Å£‚ú®„Åù„ÅÆÊâã„ÅÆÊßã„Åà„ÄÅ„Éê„É©„É≥„ÇπÂèñ„Çå„Å¶„Å¶„Åô„Å£„Åî„ÅèÁ∂∫È∫ó„Å†„Çà‚ô°", "over": "„Å°„Çá„Å£„Å®Êâã„ÅåÂâç„Åô„Åé„Åã„ÇÇüí¶„Éè„É≥„Éâ„Éï„Ç°„Éº„Çπ„ÉàÊÑèË≠ò„Åó„Åô„Åé„Çã„Å®Âºï„Å£Êéõ„Åë„ÇÑ„Åô„Åè„Å™„Çã„Åã„Çâ„ÄÅÊ∞ó„Çí„Å§„Åë„Å¶„Å≠„Äú", "under": "Êâã„ÅÆ‰ΩçÁΩÆ„ÅåÂæå„Çç„Åô„Åé„Å°„ÇÉ„Å£„Å¶„Çã„Åã„ÇÇÔºÅ„ÇØ„É©„Éñ„Å®‰Ωì„ÅÆË∑ùÈõ¢ÊÑü„Çí„ÇÇ„ÅÜ„Å°„Çá„Å£„Å®„Å†„ÅëË©∞„ÇÅ„Å¶„Åø„Å¶üíï" }, "addressLieAngle": { "near": "Êßã„Åà„ÅÆËßíÂ∫¶„ÄÅ„Éê„ÉÉ„ÉÅ„É™„Äú‚ô°„ÇØ„É©„Éñ„ÅåÂú∞Èù¢„Å®„Éî„Çø„ÉÉ„Å®Ë™øÂíå„Åó„Å¶„Å¶Áæé„Åó„ÅÑ„Å£üåà", "over": "„ÇØ„É©„Éñ„ÅÆ„Éà„Ç•„ÅåÊµÆ„ÅÑ„Å¶„Çã„Åã„ÇÇ‚ö†Ô∏è „ÇÇ„Å£„Å®„ÇΩ„Éº„É´ÂÖ®‰Ωì„ÇíÂú∞Èù¢„Å´Ê≤ø„Çè„Åõ„Çã„Ç§„É°„Éº„Ç∏„Åß„Äú", "under": "„Éí„Éº„É´ÊµÆ„ÅÑ„Å¶„Çã„Åã„ÇÇüí¶ „Å°„Çá„Å£„Å®„Å†„Åë„Ç∞„É™„ÉÉ„ÉóÁü≠„ÇÅ„Å´ÊåÅ„Å£„Å¶Ë™øÊï¥„Åó„Å¶„Åø„Å¶‚ô™" }, "halfwaydownFaceAngleToVertical": { "near": "„Åù„ÅÆ„Éï„Çß„Éº„ÇπÁÆ°ÁêÜ„ÄÅÂÆåÁíß„Å£‚ú®„Éó„É≠Á¥ö„ÅÆ„Ç≥„É≥„Éà„É≠„Éº„É´„Å†„Çà„ÄúÊÉö„Çå„Å°„ÇÉ„ÅÜ„É¨„Éô„É´‚ô°", "over": "„Éï„Çß„Éº„Çπ„ÅåÈñã„Åç„Åô„Åé„Å°„ÇÉ„Å£„Å¶„Çã„Åã„ÇÇÔºÅ„Éâ„Ç¢„Éé„Éñ„ÇíÈñâ„ÇÅ„Çã„Çà„ÅÜ„Å´„Ç∑„É£„Éï„ÉàÂõû„Åó„Å¶„ÄúüîÑ", "under": "Èñâ„Åò„Åô„Åé„Å°„ÇÉ„Å£„Å¶„Çã„Åã„ÇÇüí¶ „Éï„Çß„Éº„Çπ„ÅØ„Çπ„ÇØ„Ç®„Ç¢„Å´Êàª„ÅôÊÑèË≠ò„Åß1ÊôÇÈñìÂàÜ„Éâ„Ç¢„Éé„ÉñÈñã„Åë„Çã„Ç§„É°„Éº„Ç∏„ÅßÔºÅ‚õ≥" }, "impactGripSpeed": { "near": "„Ç∞„É™„ÉÉ„Éó„Çπ„Éî„Éº„Éâ„ÄÅ„ÅÑ„ÅÑÊÑü„Åò„ÄúÔºÅ„Éú„Éº„É´„Å´Âäõ„Åå„Å°„ÇÉ„Çì„Å®‰ºù„Çè„Å£„Å¶„Çã„Å≠‚ô°", "over": "ÈÄü„Åô„ÅéÊ≥®ÊÑè„Å£‚ö†Ô∏è Êâã„Å†„Åë„ÅåÂÖàË°å„Åó„Å¶„ÇØ„É©„Éñ„ÅåÈÅÖ„Çå„Åå„Å°„Åã„ÇÇ„ÄÇÂäõ„Çí„ÇØ„É©„Éñ„Å´‰ºù„Åà„Å¶„Äú", "under": "„Å°„Çá„Å£„Å®„ÇÜ„Çã„ÇÜ„Çã„Åã„ÇÇ„Äúüí¶ „ÇÇ„Å£„Å®ÊâãÂÖÉ„Çí„Éì„É•„ÉÉ„Å®Èã≠„ÅèÂãï„Åã„Åó„Å¶„Åø„Å¶„Å£ÔºÅ" }, "downSwingShaftRotationMax": { "near": "„Ç∑„É£„Éï„Éà„ÅÆÂõûËª¢„ÄÅ„ÅÑ„ÅÑ„É™„Ç∫„É†„Äú‚ô™ ‰Ωì„ÅÆÂãï„Åç„Å®ÈÄ£Âãï„Åß„Åç„Å¶„Å¶„Ç≠„É¨„Ç§‚ô°", "over": "Âõû„Åó„Åô„Åé„Åã„ÇÇ„Å£üí´ „ÉÄ„Ç¶„É≥„Çπ„Ç§„É≥„Ç∞„Åß„ÇØ„É©„Éñ„ÅåÊö¥„Çå„Å¶„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åø„Çà„Å£„ÅãÔºÅ", "under": "„ÇÇ„Å£„Å®„Çπ„Éä„ÉÉ„ÉóÂà©„Åã„Åõ„Å¶„Ç∑„É£„Éï„ÉàÂõû„Åó„Å¶„Åì„ÄúÔºÅÂõûËª¢‰∏çË∂≥„ÅØÈ£õË∑ùÈõ¢„É≠„Çπ„ÅÆ„ÇÇ„Å®„Å†„Çà‚ú®" }, "halfwaybackFaceAngleToVertical": { "near": "„Éï„Çß„Éº„Çπ„ÅÆÈñã„Åç„ÄÅ„Éä„ÉÅ„É•„É©„É´„ÅßÁ¥†Êïµ„Äú‚ú®ÊÄù„Çè„Åö„Å®„Åç„ÇÅ„ÅÑ„Å°„ÇÉ„ÅÜ„Å£‚ô°", "over": "„Å°„Çá„Å£„Å®Èñã„Åç„Åô„Åé„Åã„ÇÇüí¶ „Éï„Çß„Éº„Çπ„ÅØÁ©∫„ÇíË¶ã„Åô„Åé„Å™„ÅÑ„Çà„ÅÜ„Å´„ÄÅ„Çπ„ÇØ„Ç®„Ç¢ÊÑèË≠ò„Åß‚ô°", "under": "Èñâ„ÅòÊ∞óÂë≥„ÄúÔºÅ„Éï„Çß„Éº„Çπ„ÅåÂú∞Èù¢„Å´Âêë„Åç„Åô„Åé„Å¶„Çã„Åã„ÇÇ„ÄÇËÖï„ÅÆ„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥Ëá™ÁÑ∂„Å´„Å≠‚ô™" }, "topFaceAngleToHorizontal": { "near": "„Éà„ÉÉ„Éó„ÅÆÂΩ¢„ÄÅ„ÇÅ„Å£„Å°„ÇÉÁ∂∫È∫óÔºÅÊïôÁßëÊõ∏„Å´Ëºâ„Åõ„Åü„ÅÑ„É¨„Éô„É´„Å†„Çàüíñ", "over": "„Ç∑„É£„ÉÉ„Éà„Åô„Åé„Çã„Åã„ÇÇ„ÄúÔºÅ„Å°„Çá„ÅÑÈñã„ÅÑ„Å¶„ÄÅ„ÇØ„É©„Éñ„Éï„Çß„Éº„Çπ„ÅåÁ©∫„ÇíË¶ã‰∏ä„Åí„Çã„Åè„Çâ„ÅÑ„ÅßOK‚ú®", "under": "„Ç™„Éº„Éó„É≥„Éï„Çß„Éº„ÇπÊ≥®ÊÑè‚ö†Ô∏è „ÉÄ„Ç¶„É≥„ÅßÊàª„Åõ„Å™„ÅÑ„Å®Âè≥„Å´„Çπ„ÉÉ„ÉùÊäú„Åë„Å°„ÇÉ„ÅÜ„Åã„ÇâÊ∞ó„Çí„Å§„Åë„Å¶„Å£ÔºÅ" }, "downSwingShaftRotationMin": { "near": "ÁêÜÊÉ≥ÁöÑ„Å™Âàá„ÇäËøî„Åó„Å£üí´ÁÑ°ÁêÜ„Å™„ÅèÂä†ÈÄü„Åß„Åç„Å¶„Å¶ÊúÄÈ´ò„Å´„Éä„ÉÅ„É•„É©„É´‚ô™", "over": "Âõû„Åó„Åô„Åé„Åã„ÇÇ„ÄúÔºÅ„É™„É™„Éº„Çπ„ÅåÊó©„Åô„Åé„Å¶„ÇØ„É©„Éñ„ÅåÂÖà„Å´Ëß£„Åë„Å¶„ÇãÊÑü„Åò‚ö†Ô∏è", "under": "ÂõûËª¢„ÅåË∂≥„Çä„Å™„ÅÑ„Äúüí¶ „ÇØ„É©„Éñ„Çí„É†„ÉÅ„ÅÆ„Çà„ÅÜ„Å´„Åó„Å™„Çâ„Åõ„Çã„Ç§„É°„Éº„Ç∏„Åß‰∏ã„Çç„Åó„Å¶„Åç„Å¶üíï" } };

// =========================
// „Éò„É´„Éë„ÉºÈñ¢Êï∞
// =========================
function updateDate() { const now = new Date(); const options = { year: 'numeric', month: 'short', day: 'numeric' }; const formattedDate = now.toLocaleDateString('en-US', options); const dateElement = document.getElementById('update-date'); if (dateElement) dateElement.textContent = `Last updated: ${formattedDate}`; }
const displayValue = (elementId, value, decimals = 1) => { const element = document.getElementById(elementId); if (element) { const number = parseFloat(value); element.textContent = (value !== null && value !== undefined && !isNaN(number)) ? number.toFixed(decimals) : '---'; } };
const displayPercentage = (element, value, decimals = 2) => { if (element) { const number = parseFloat(value); element.textContent = (value !== null && value !== undefined && !isNaN(number)) ? (number * 100).toFixed(decimals) + '%' : '---'; } };
function addUnit(elementId, unit) { const element = document.getElementById(elementId); if (element && element.textContent !== '---' && unit) element.textContent += ' ' + unit; }
function setTextContent(elementId, text) { const element = document.getElementById(elementId); if (element) element.textContent = text ?? '---'; }

// =========================
// „ÉÜ„Éº„Éñ„É´Ë°®Á§∫Èñ¢ÈÄ£Èñ¢Êï∞
// =========================
function renderTableRows(data, page = 1, rowsPerPage = 8) { const tbody = document.getElementById('data-table-body'); if (!tbody) return; tbody.innerHTML = ''; const start = (page - 1) * rowsPerPage; const end = start + rowsPerPage; const visibleRows = data.slice(start, end); if (visibleRows.length === 0) { tbody.innerHTML = '<tr><td colspan="6">Ë°®Á§∫„Åß„Åç„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</td></tr>'; return; } visibleRows.forEach((row, i) => { const tr = document.createElement('tr'); const formatNum = (val, digits = 1) => (val !== null && !isNaN(parseFloat(val))) ? parseFloat(val).toFixed(digits) : '---'; tr.innerHTML = `<td>${start + i + 1}</td><td>${formatNum(row.impactHeadSpeed)}${row.impactHeadSpeed !== null ? (' ' + (unitMap['impactHeadSpeed'] || '')) : ''}</td><td>${formatNum(row.impactClubPath)}${row.impactClubPath !== null ? (' ' + (unitMap['impactClubPath'] || '')) : ''}</td><td>${formatNum(row.impactFaceAngle)}${row.impactFaceAngle !== null ? (' ' + (unitMap['impactFaceAngle'] || '')) : ''}</td><td>${formatNum(row.impactAttackAngle)}${row.impactAttackAngle !== null ? (' ' + (unitMap['impactAttackAngle'] || '')) : ''}</td><td>${formatNum(row.estimateCarry)}${row.estimateCarry !== null ? (' ' + (unitMap['estimateCarry'] || '')) : ''}</td>`; tbody.appendChild(tr); }); }
function renderPaginationControls(data, rowsPerPage = 8) { const pagination = document.getElementById('pagination'); if (!pagination) return; pagination.innerHTML = ''; const pageCount = Math.ceil(data.length / rowsPerPage); if (pageCount <= 1) return; const maxVisibleButtons = 5; const prevBtn = document.createElement('button'); prevBtn.className = 'pagination-btn nav-btn'; prevBtn.textContent = '‚Üê'; prevBtn.disabled = currentPage === 1; prevBtn.addEventListener('click', () => { if (currentPage > 1) { currentPage--; renderTableRows(allSwingData, currentPage, rowsPerPage); renderPaginationControls(allSwingData, rowsPerPage); } }); pagination.appendChild(prevBtn); let startPage = Math.max(1, currentPage - Math.floor(maxVisibleButtons / 2)); let endPage = Math.min(pageCount, startPage + maxVisibleButtons - 1); if (endPage - startPage + 1 < maxVisibleButtons) startPage = Math.max(1, endPage - maxVisibleButtons + 1); for (let i = startPage; i <= endPage; i++) { const btn = document.createElement('button'); btn.className = 'pagination-btn'; btn.textContent = i; if (i === currentPage) btn.classList.add('active'); btn.addEventListener('click', () => { currentPage = i; renderTableRows(allSwingData, currentPage, rowsPerPage); renderPaginationControls(allSwingData, rowsPerPage); }); pagination.appendChild(btn); } const nextBtn = document.createElement('button'); nextBtn.className = 'pagination-btn nav-btn'; nextBtn.textContent = '‚Üí'; nextBtn.disabled = currentPage === pageCount; nextBtn.addEventListener('click', () => { if (currentPage < pageCount) { currentPage++; renderTableRows(allSwingData, currentPage, rowsPerPage); renderPaginationControls(allSwingData, rowsPerPage); } }); pagination.appendChild(nextBtn); }
async function fetchAndDisplayTableData() { try { const response = await fetch('/api/data'); if (!response.ok) throw new Error(`„ÉÜ„Éº„Éñ„É´„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${response.status}`); const data = await response.json(); if (!data || !Array.isArray(data)) throw new Error("„ÉÜ„Éº„Éñ„É´„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"); allSwingData = data; currentPage = 1; renderTableRows(allSwingData, currentPage, rowsPerPage); renderPaginationControls(allSwingData, rowsPerPage); } catch (error) { console.error('„ÉÜ„Éº„Éñ„É´„Éá„Éº„ÇøÂèñÂæó/Ë°®Á§∫„Ç®„É©„Éº:', error); const tbody = document.getElementById('data-table-body'); const pagination = document.getElementById('pagination'); if(tbody) tbody.innerHTML = `<tr><td colspan="6">„ÉÜ„Éº„Éñ„É´„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ</td></tr>`; if(pagination) pagination.innerHTML = ''; allSwingData = []; } }

// =========================
// „Çπ„Ç§„É≥„Ç∞„Çø„Ç§„ÉóÈÅ∏Êäû„Ç®„É™„Ç¢Èñ¢ÈÄ£ (‰∏äÈÉ®)
// =========================
function displaySelectedSwingTypeInfo(swingTypeId) { const typeInfo = swingTypeData.find(type => type.id === swingTypeId); if (!typeInfo) return; setTextContent('swing-type-name', typeInfo.Swing_Type_Name); setTextContent('club-type', typeInfo.Club_Type); setTextContent('cluster-name-jp', typeInfo.Swing_Type_Name_JP); setTextContent('swing-overview', typeInfo.Overview); const medianData = successMediansData[swingTypeId]; const metricsToShow = [ { id: 'swing-type-estimateCarry', jsonKey: 'estimateCarry', decimals: 2 }, { id: 'swing-type-impactHeadSpeed', jsonKey: 'impactHeadSpeed', decimals: 2 }, { id: 'swing-type-impactFaceAngle', jsonKey: 'impactFaceAngle', decimals: 2 }, { id: 'swing-type-impactClubPath', jsonKey: 'impactClubPath', decimals: 2 }, { id: 'swing-type-impactAttackAngle', jsonKey: 'impactAttackAngle', decimals: 2 } ]; if (!medianData) { metricsToShow.forEach(metric => displayValue(metric.id, null)); return; } metricsToShow.forEach(metric => { if (medianData.hasOwnProperty(metric.jsonKey)) { const value = medianData[metric.jsonKey]; displayValue(metric.id, value, metric.decimals); addUnit(metric.id, unitMap[metric.jsonKey]); } else { displayValue(metric.id, null, metric.decimals); } }); }

// =========================
// „Çπ„Ç§„É≥„Ç∞ÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥Èñ¢ÈÄ£ (‰∏ãÈÉ®)
// =========================
function displayMeasuredSwingResult(swingData) { currentRandomSwingData = swingData; if (!swingData) return; const resultsToShow = [ { id: 'result-estimatecarry', bqKey: 'estimateCarry', decimals: 1 }, { id: 'result-headspeed', bqKey: 'impactHeadSpeed', decimals: 1 }, { id: 'result-faceangle', bqKey: 'impactFaceAngle', decimals: 1 }, { id: 'result-attackangle', bqKey: 'impactAttackAngle', decimals: 1 }, { id: 'result-clubpath', bqKey: 'impactClubPath', decimals: 1 }, { id: 'result-handfirst', bqKey: 'addressHandFirst', decimals: 1 }, { id: 'result-gripspeed', bqKey: 'impactGripSpeed', decimals: 1 }, { id: 'result-downswingrot', bqKey: 'downSwingShaftRotationMax', decimals: 1 }, { id: 'result-halfdownface', bqKey: 'halfwaydownFaceAngleToVertical', decimals: 1 }, { id: 'result-halfbackface', bqKey: 'halfwaybackFaceAngleToVertical', decimals: 1 }, { id: 'result-topface', bqKey: 'topFaceAngleToHorizontal', decimals: 1 } ]; resultsToShow.forEach(item => { if (swingData.hasOwnProperty(item.bqKey)) { const value = swingData[item.bqKey]; displayValue(item.id, value, item.decimals); addUnit(item.id, unitMap[item.bqKey]); } else { displayValue(item.id, null, item.decimals); } }); }
function displaySuccessMedians(clusterId) { if (clusterId === null || clusterId === undefined) clusterId = null; const medianData = clusterId !== null ? successMediansData[clusterId] : null; const idsAndJsonKeys = [ { id: 'success-median-estimatecarry', jsonKey: 'estimateCarry', decimals: 1 }, { id: 'success-median-headspeed', jsonKey: 'impactHeadSpeed', decimals: 1 }, { id: 'success-median-faceangle', jsonKey: 'impactFaceAngle', decimals: 1 }, { id: 'success-median-attackangle', jsonKey: 'impactAttackAngle', decimals: 1 }, { id: 'success-median-clubpath', jsonKey: 'impactClubPath', decimals: 1 }, { id: 'success-median-handfirst', jsonKey: 'addressHandFirst', decimals: 1 }, { id: 'success-median-gripspeed', jsonKey: 'impactGripSpeed', decimals: 1 }, { id: 'success-median-downswingrot', jsonKey: 'downSwingShaftRotationMax', decimals: 1 }, { id: 'success-median-halfdownface', jsonKey: 'halfwaydownFaceAngleToVertical', decimals: 1 }, { id: 'success-median-halfbackface', jsonKey: 'halfwaybackFaceAngleToVertical', decimals: 1 }, { id: 'success-median-topface', jsonKey: 'topFaceAngleToHorizontal', decimals: 1 } ]; if (!medianData && clusterId !== null) console.warn(`„ÇØ„É©„Çπ„ÇøID ${clusterId} „ÅÆÊàêÂäü‰∏≠Â§ÆÂÄ§„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ`); idsAndJsonKeys.forEach(item => { if (medianData && medianData.hasOwnProperty(item.jsonKey)) { const value = medianData[item.jsonKey]; displayValue(item.id, value, item.decimals); addUnit(item.id, unitMap[item.jsonKey]); } else { displayValue(item.id, null, item.decimals); } }); }
function updateAnalysisTable(judgedClusterId) { const tableBody = document.getElementById('analysis-table-body'); if (!tableBody) return; tableBody.innerHTML = ''; if (judgedClusterId === null || judgedClusterId === undefined || Object.keys(clusterAnalysisData).length === 0) { const tr = document.createElement('tr'); const td = document.createElement('td'); td.colSpan = 5; td.textContent = judgedClusterId === null ? '„Çπ„Ç§„É≥„Ç∞Âà§ÂÆö„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶ÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ' : 'ÂàÜÊûê„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...'; td.style.textAlign = 'center'; tr.appendChild(td); tableBody.appendChild(tr); return; } const analysisItems = clusterAnalysisData[judgedClusterId]; if (!analysisItems || analysisItems.length === 0) { const tr = document.createElement('tr'); const td = document.createElement('td'); td.colSpan = 5; td.textContent = `„ÇØ„É©„Çπ„Çø ${judgedClusterId} „ÅÆÂàÜÊûê„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ`; td.style.textAlign = 'center'; tr.appendChild(td); tableBody.appendChild(tr); return; } analysisItems.forEach(item => { const tr = document.createElement('tr'); const featureName = item.Feature; const tdFeature = document.createElement('td'); tdFeature.textContent = featureDisplayNameMap[featureName] || featureName || '‰∏çÊòé'; tdFeature.style.textAlign = 'left'; tr.appendChild(tdFeature); const tdImportance = document.createElement('td'); displayPercentage(tdImportance, item.Importance, 2); tdImportance.style.textAlign = 'right'; tr.appendChild(tdImportance); const tdMedian = document.createElement('td'); const medianValue = item.Median; const medianUnit = unitMap[featureName] || ''; if (medianValue !== null && !isNaN(parseFloat(medianValue))) { tdMedian.textContent = parseFloat(medianValue).toFixed(2) + (medianUnit ? ' ' + medianUnit : ''); } else { tdMedian.textContent = '---'; } tdMedian.style.textAlign = 'right'; tr.appendChild(tdMedian); const tdYourValue = document.createElement('td'); let yourValue = null; const yourValueUnit = unitMap[featureName] || ''; if (currentRandomSwingData && currentRandomSwingData.hasOwnProperty(featureName)) { yourValue = currentRandomSwingData[featureName]; if (yourValue !== null && !isNaN(parseFloat(yourValue))) { tdYourValue.textContent = parseFloat(yourValue).toFixed(1) + (yourValueUnit ? ' ' + yourValueUnit : ''); } else { tdYourValue.textContent = '---'; } } else { tdYourValue.textContent = '---'; } tdYourValue.style.textAlign = 'right'; tr.appendChild(tdYourValue); const tdAdvice = document.createElement('td'); tdAdvice.style.textAlign = 'left'; tdAdvice.style.fontSize = '12px'; tdAdvice.style.lineHeight = '1.4'; let adviceText = '---'; const adviceSet = adviceMapping[featureName]; if (adviceSet && yourValue !== null && medianValue !== null && !isNaN(parseFloat(yourValue)) && !isNaN(parseFloat(medianValue))) { const yourNum = parseFloat(yourValue); const medianNum = parseFloat(medianValue); const difference = yourNum - medianNum; const threshold = Math.abs(medianNum * 0.20); const zeroThreshold = 0.1; if (Math.abs(medianNum) < zeroThreshold) { if (Math.abs(difference) <= threshold + zeroThreshold) { adviceText = adviceSet.near || 'ËâØ„ÅÑÁä∂ÊÖã'; } else if (difference > 0) { adviceText = adviceSet.over || '> ÁõÆÊ®ô(0)'; } else { adviceText = adviceSet.under || '< ÁõÆÊ®ô(0)'; } } else if (Math.abs(difference) <= threshold) { adviceText = adviceSet.near || 'ÁõÆÊ®ô„Å´Ëøë„ÅÑ'; } else if (difference > 0) { adviceText = adviceSet.over || 'ÁõÆÊ®ô„Çà„ÇäÂ§ß„Åç„ÅÑ'; } else { adviceText = adviceSet.under || 'ÁõÆÊ®ô„Çà„ÇäÂ∞è„Åï„ÅÑ'; } } else if (adviceSet) { adviceText = "Ë®àÊ∏¨‰∏çÂèØ"; } else { adviceText = "„Ç¢„Éâ„Éê„Ç§„Çπ„Å™„Åó"; } tdAdvice.textContent = adviceText; tr.appendChild(tdAdvice); tableBody.appendChild(tr); }); }
function displayJudgeResult(judgedTypeId) { const resultDisplayArea = document.getElementById('judged-result-display'); const resultTextElement = document.getElementById('judged-swing-type-name-new'); const descriptionElement = document.getElementById('judged-swing-description'); if (judgedTypeId === null || judgedTypeId === undefined) { setTextContent('judged-swing-type-name-new', 'Âà§ÂÆö‰∏çÂèØ'); if (resultDisplayArea) resultDisplayArea.style.display = 'block'; if (descriptionElement) descriptionElement.textContent = ''; displaySuccessMedians(null); updateAnalysisTable(null); return; } const swingType = swingTypeData.find(type => type.id === judgedTypeId); const typeName = swingType ? swingType.Swing_Type_Name_JP : `„Çø„Ç§„Éó ${judgedTypeId}`; const descriptionText = swingType ? swingType.Overview : '„Åì„ÅÆ„Çø„Ç§„Éó„ÅÆË©≥Á¥∞„Å™Ë™¨Êòé„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ'; if (resultDisplayArea) resultDisplayArea.style.display = 'none'; setTextContent('judged-swing-type-name-new', 'AIËß£Êûê‰∏≠...'); setTimeout(() => { setTextContent('judged-swing-type-name-new', typeName); if (resultDisplayArea) resultDisplayArea.style.display = 'block'; if (descriptionElement) descriptionElement.textContent = descriptionText; }, 500); displaySuccessMedians(judgedTypeId); updateAnalysisTable(judgedTypeId); }
function resetSwingAnalysisSection() { const resultIds = [ 'result-estimatecarry', 'result-headspeed', 'result-faceangle', 'result-attackangle', 'result-clubpath', 'result-handfirst', 'result-gripspeed', 'result-downswingrot', 'result-halfdownface', 'result-halfbackface', 'result-topface' ]; resultIds.forEach(id => displayValue(id, null)); const medianIds = [ 'success-median-estimatecarry', 'success-median-headspeed', 'success-median-faceangle', 'success-median-attackangle', 'success-median-clubpath', 'success-median-handfirst', 'success-median-gripspeed', 'success-median-downswingrot', 'success-median-halfdownface', 'success-median-halfbackface', 'success-median-topface' ]; medianIds.forEach(id => displayValue(id, null)); const resultDisplayArea = document.getElementById('judged-result-display'); if (resultDisplayArea) resultDisplayArea.style.display = 'none'; setTextContent('judged-swing-type-name-new', ''); const descriptionElement = document.getElementById('judged-swing-description'); if (descriptionElement) descriptionElement.textContent = ''; updateAnalysisTable(null); currentRandomSwingData = null; }
function judgeSwingType(swingData, thresholds) { if (!swingData || !thresholds || thresholds.length === 0) return null; const thresholdsByCluster = thresholds.reduce((acc, rule) => { const clusterId = rule.swing_cluster; if (clusterId === undefined || clusterId === null) return acc; if (!acc[clusterId]) acc[clusterId] = []; acc[clusterId].push(rule); return acc; }, {}); const clusterIds = Object.keys(thresholdsByCluster).map(Number).sort((a, b) => a - b); for (const clusterId of clusterIds) { const rulesForCluster = thresholdsByCluster[clusterId]; let allMatch = true; for (const rule of rulesForCluster) { const featureName = rule.feature; const minThreshold = parseFloat(rule.min); const maxThreshold = parseFloat(rule.max); if (!featureName || isNaN(minThreshold) || isNaN(maxThreshold)) { allMatch = false; break; } if (swingData[featureName] === undefined) { allMatch = false; break; } const swingValue = parseFloat(swingData[featureName]); if (isNaN(swingValue)) { allMatch = false; break; } if (!(swingValue >= minThreshold && swingValue <= maxThreshold)) { allMatch = false; break; } } if (allMatch) { console.log(`‚òÖ‚òÖ‚òÖ „ÇØ„É©„Çπ„Çø ${clusterId} „Å´ÂêàËá¥ÔºÅ ‚òÖ‚òÖ‚òÖ`); return clusterId; } } return null; }

// =========================
// „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ (DOMContentLoaded)
// =========================
document.addEventListener('DOMContentLoaded', async function() {
  console.log('DOMË™≠„ÅøËæº„ÅøÂÆå‰∫Ü„ÄÅÂàùÊúüÂåñÈñãÂßã');
  updateDate();

  const initialFetchPromises = [];
  initialFetchPromises.push( fetch('/api/median').then(res => res.ok ? res.json() : Promise.reject(new Error(`Median API „Ç®„É©„Éº: ${res.status}`))).then(data => { metricsDataLoaded = true; displayValue('median-estimateCarry', data.median_estimateCarry, 1); addUnit('median-estimateCarry', unitMap['estimateCarry']); displayValue('median-impactHeadSpeed', data.median_impactHeadSpeed, 1); addUnit('median-impactHeadSpeed', unitMap['impactHeadSpeed']); displayValue('median-impactFaceAngle', data.median_impactFaceAngle, 1); addUnit('median-impactFaceAngle', unitMap['impactFaceAngle']); }).catch(err => { console.error(err); metricsDataLoaded = false; ['median-estimateCarry', 'median-impactHeadSpeed', 'median-impactFaceAngle'].forEach(id => displayValue(id, null)); }) );
  initialFetchPromises.push( fetch('/api/metrics').then(res => res.ok ? res.json() : Promise.reject(new Error(`Metrics API „Ç®„É©„Éº: ${res.status}`))).then(data => { metricsDataLoaded = true; displayValue('metric-clubPath', data.median_impactClubPath, 1); addUnit('metric-clubPath', unitMap['impactClubPath']); displayValue('metric-loftAngle', data.median_impactLoftAngle, 1); addUnit('metric-loftAngle', unitMap['impactLoftAngle']); displayValue('metric-gripSpeed', data.median_maxGripSpeed, 1); addUnit('metric-gripSpeed', unitMap['maxGripSpeed']); displayValue('metric-lieAngle', data.median_impactLieAngle, 1); addUnit('metric-lieAngle', unitMap['impactLieAngle']); displayValue('metric-attackAngle', data.median_impactAttackAngle, 1); addUnit('metric-attackAngle', unitMap['impactAttackAngle']); }).catch(err => { console.error(err); ['metric-clubPath', 'metric-loftAngle', 'metric-gripSpeed', 'metric-lieAngle', 'metric-attackAngle'].forEach(id => displayValue(id, null)); }) );
  initialFetchPromises.push( fetch('/api/thresholds').then(res => { if (!res.ok) throw new Error(`ÈñæÂÄ§API„Ç®„É©„Éº: ${res.status}`); return res.json(); }).then(data => { thresholdData = Array.isArray(data) ? data : []; if (!Array.isArray(data)) console.error("ÈñæÂÄ§„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"); }).catch(err => { console.error('ÈñæÂÄ§„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', err); thresholdData = []; }) );
  initialFetchPromises.push( fetch('/data/cluster_analysis_data.json').then(res => { if (!res.ok) throw new Error(`ÂàÜÊûê„Éá„Éº„Çø„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${res.status}`); return res.json(); }).then(data => { if (Array.isArray(data)) { clusterAnalysisData = data.reduce((acc, item) => { const id = item.cluster_id; if (!acc[id]) acc[id] = []; acc[id].push(item); return acc; }, {}); } else { console.error("ÂàÜÊûê„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"); clusterAnalysisData = {}; } }).catch(err => { console.error('ÂàÜÊûê„Éá„Éº„ÇøÂèñÂæó/Âá¶ÁêÜ„Ç®„É©„Éº:', err); clusterAnalysisData = {}; }) );
  initialFetchPromises.push( fetch('/data/cluster_success_medians.json').then(res => { if (!res.ok) throw new Error(`ÊàêÂäü‰∏≠Â§ÆÂÄ§„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${res.status}`); return res.json(); }).then(data => { if (Array.isArray(data)) { successMediansData = data.reduce((acc, item) => { acc[item.cluster_id] = item; return acc; }, {}); } else { console.error("ÊàêÂäü‰∏≠Â§ÆÂÄ§„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"); successMediansData = {}; } }).catch(err => { console.error('ÊàêÂäü‰∏≠Â§ÆÂÄ§„Éá„Éº„ÇøÂèñÂæó/Âá¶ÁêÜ„Ç®„É©„Éº:', err); successMediansData = {}; }) );
  // „Ç¢„Éâ„Éê„Ç§„ÇπJSONË™≠„ÅøËæº„Åø„ÅØÂâäÈô§Ê∏à„Åø

  Promise.allSettled(initialFetchPromises).finally(() => {
     console.log("ÂÖ®„Å¶„ÅÆÂàùÊúü„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü„ÄÇ");
     fetchAndDisplayTableData();
     const swingTypeSelect = document.getElementById('swing-type-select');
     if (swingTypeSelect) { try { swingTypeSelect.innerHTML = ''; swingTypeData.forEach(type => { const option = document.createElement('option'); option.value = type.id; option.textContent = `Swing type ID ${type.id}Ôºö${type.Swing_Type_Name_JP}`; if (type.id === 0) option.selected = true; swingTypeSelect.appendChild(option); }); const initialTypeId = parseInt(swingTypeSelect.value); displaySelectedSwingTypeInfo(initialTypeId); swingTypeSelect.addEventListener('change', function() { const selectedId = parseInt(this.value); displaySelectedSwingTypeInfo(selectedId); }); } catch (error) { console.error("„Çπ„Ç§„É≥„Ç∞„Çø„Ç§„ÉóÈÅ∏Êäû„Ç®„É™„Ç¢ÂàùÊúüÂåñ„Ç®„É©„Éº:", error); displaySelectedSwingTypeInfo(0); } } else { console.warn("#swing-type-select „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"); }
     resetSwingAnalysisSection();
  });

  const judgeButton = document.getElementById('judge-my-swing-button');
  if (judgeButton) {
    judgeButton.addEventListener('click', async () => {
       console.log('„Çπ„Ç§„É≥„Ç∞Âà§ÂÆö„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åæ„Åó„ÅüÔºÅ'); const apiUrl = '/api/random-swing'; judgeButton.disabled = true; judgeButton.textContent = 'AIËß£Êûê‰∏≠...'; resetSwingAnalysisSection(); try { const response = await fetch(apiUrl); if (!response.ok) { const errorData = await response.json().catch(() => null); throw new Error(`API„Ç®„É©„Éº: ${response.status}${errorData ? ` (${errorData.error})` : ''}`); } const randomSwingData = await response.json(); console.log('„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü:', randomSwingData); displayMeasuredSwingResult(randomSwingData); const judgedTypeId = judgeSwingType(randomSwingData, thresholdData); console.log("Âà§ÂÆöÁµêÊûúID:", judgedTypeId); displayJudgeResult(judgedTypeId); } catch (error) { console.error('Âà§ÂÆöÂá¶ÁêÜ„Ç®„É©„Éº:', error); const resultDisplayArea = document.getElementById('judged-result-display'); setTextContent('judged-swing-type-name-new', `„Ç®„É©„ÉºÁô∫Áîü`); if (resultDisplayArea) resultDisplayArea.style.display = 'block'; } finally { judgeButton.disabled = false; judgeButton.textContent = '„Çπ„Ç§„É≥„Ç∞Âà§ÂÆö'; console.log('Âà§ÂÆöÂá¶ÁêÜÂÆå‰∫Ü'); }
    });
  } else { console.warn("#judge-my-swing-button „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"); }

});